version: "3.8"

# ======================
# üì¶ Banco de Dados
# ======================
services:
  postgres:
    image: ghcr.io/nicolasbarsalini/postgres:latest
    container_name: espacobuddy_postgres
    restart: always
    networks:
      - espacobuddy_network
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "${DATABASEPORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data  # Persist√™ncia do banco
      - ./assets/postgres/scripts:/docker-entrypoint-initdb.d  # Scripts de inicializa√ß√£o (SQL)

# ======================
# üîê Keycloak (Autentica√ß√£o)
# ======================
  keycloak:
    image: ghcr.io/nicolasbarsalini/keycloak:latest
    container_name: espacobuddy_keycloak
    user: root
    depends_on:
      - postgres
    networks:
      - espacobuddy_network
    ports:
      - "${KEYCLOAKPORT:-8080}:8080"
    restart: always
    volumes:
      - ./assets/keycloak/themes:/opt/keycloak/themes        # Temas personalizados
      - ./assets/keycloak/import:/opt/keycloak/data/import   # Importa√ß√£o de realm
      - urbaneden_keycloak_volume:/opt/keycloak/data         # Persist√™ncia dos dados do Keycloak
    environment:
      JAVA_OPTS: "-Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.authorization=enabled -Dkeycloak.profile.mode=standalone"
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://espacobuddy_postgres:5432/keycloak"
      KC_DB_USERNAME: "postgres"
      KC_DB_PASSWORD: "postgres"
      KC_HTTPS_PORT: "8443"
      KC_FEATURES: "scripts,authorization"
      KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
      KC_BOOTSTRAP_ADMIN_PASSWORD: "admin"
      KC_THEME: "custom-themes"
      KC_THEME_EMAIL: "custom-themes"
    command: ["start-dev"]  # Executa o Keycloak no modo de desenvolvimento

# ======================
# üìã Servi√ßo: Listar Dados
# ======================
  list:
    build:
      context: ./services/list
      dockerfile: Containerfile
    container_name: espacobuddy_list
    restart: always
    ports:
      - "${LIST_PORT:-5003}:5003"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - espacobuddy_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      retries: 5
      start_period: 30s

# ======================
# ‚ûï Servi√ßo: Registro Din√¢mico
# ======================
  register:
    build:
      context: ./services/register
      dockerfile: Containerfile
    container_name: espacobuddy_register
    restart: always
    ports:
      - "${LIST_PORT:-5000}:5000"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - espacobuddy_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      retries: 5
      start_period: 30s

# ======================
# üóëÔ∏è Servi√ßo: Deletar Dados
# ======================
  delete:
    build:
      context: ./services/delete
      dockerfile: Containerfile
    container_name: espacobuddy_delete
    restart: always
    ports:
      - "${LIST_PORT:-5004}:5004"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - espacobuddy_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      retries: 5
      start_period: 30s

# ======================
# üïí Servi√ßo: Executar Rotinas
# ======================
  run_routine:
    build:
      context: ./services/run_routine
      dockerfile: Containerfile
    container_name: espacobuddy_run_routine
    restart: always
    ports:
      - "${ROUTINE_PORT:-5005}:5005"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MQTT_BROKER: ${MQTT_BROKER}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_TOPIC_ROUTINE: ${MQTT_TOPIC_ROUTINE}
    networks:
      - espacobuddy_network
    depends_on:
      - postgres
      - mosquitto
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      retries: 5
      start_period: 30s

# ======================
# üì° Broker MQTT (Mosquitto)
# ======================
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: espacobuddy_mosquitto
    restart: always
    ports:
      - "1883:1883"  # Porta padr√£o MQTT
    volumes:
      - ./services/mosquitto/config:/mosquitto/config  # Configura√ß√£o customizada
      - ./services/mosquitto/data:/mosquitto/data      # Persist√™ncia de dados
    networks:
      - espacobuddy_network

# ======================
# üì¶ Volumes persistentes
# ======================
volumes:
  pgdata:                         # Volume para dados do PostgreSQL
  urbaneden_keycloak_volume:     # Volume para persist√™ncia do Keycloak

# ======================
# üåê Rede interna
# ======================
networks:
  espacobuddy_network:
    driver: bridge                # Rede tipo bridge para comunica√ß√£o interna entre os servi√ßos
